@page "/todo"
@inject ITodoService TodoService
@inject IUserService UserService
@inject IHttpContextAccessor httpContextAccessor
@using BussinessLayer.Entities
@using BussinessLayer.ExtentionMethods


<SAPToastArea
           @ref="ToastArea"
          SAPToastDirection="SAPToastDirection.Column"
           ToastAreatPosition="SAPToastAreatPosition.Right"
              >

</SAPToastArea>

<SAPAlertBox @ref="Alert1"
             AlertBoxSize="SAPAlertBoxSize.Small"
             SAPAlertType="@SAPAlertType.None"
             AnimationType="@AnimateBook.ZoomEntrances.ZoomIn.Fast()"
             FooterText="@todoItem.LastModified.ToSAPFormat()"
             Title="@todoItem.Title">
    <div class="text-left">
        <div class="form-group">
            <label>
                Note:
            </label>
            <textarea @bind="todoItem.Note" class="form-control"></textarea>

        </div>

        <div class="form-group">
            <label>
                Due Date :
            </label>
            <input class="form-control" type="date" @bind="todoItem.DueDate" />
            <small class="text-muted"> Today date is : @DateTime.Now.ToString("yyyy-MM-dd")</small>
        </div>

        <div class="form-group">
            <label>
                Piority:
            </label>
            <select @bind="@todoItem.Priority" class="form-control">
                @foreach (var item in Enum.GetValues(typeof(BussinessLayer.Enums.PriorityLevel)))
                {
                    <option>@item</option>
                }
            </select>
        </div>
        <button @onclick="() => DeleteSubTask(todoItem)" class="btn btn-default text-danger float-left">Delete</button>
        <button @onclick="() => UpdateSubTask(todoItem)" class="btn btn-primary float-right">Update</button>


    </div>


</SAPAlertBox>

<SAPAlertBox @ref="Alert3"
             SAPAlertType="SAPAlertType.None"
             AnimationType="@AnimateBook.ZoomEntrances.ZoomIn.Faster()"
             Title="Create a todo">
    <div class="form-group text-left">
        <label> Write a name for todo</label>
        <input @bind="todoList.Title" class="form-control" placeholder="Todo name" />
        <small id="emailHelp" class="form-text text-danger">@ErrorText</small>

    </div>
    

    <div class="form-group text-left">

        <input class="form-control" type="color" @bind="todoList.Color" />

    </div>

    <button @onclick="CreateTodo" class="btn btn-primary btn-block">
        Add
    </button>
</SAPAlertBox>


<SAPAlertBox
             
             @ref="Alert2"
             AnimationType="@AnimateBook.ZoomEntrances.ZoomIn.Faster()"
             Title="Choose user to assign todo"
             SAPAlertType="SAPAlertType.None">
    <div class="form-group">
        <select @bind="AssignUserId" class="form-control">
            @foreach (var user in otherUsers)
            {
                <option value="@user.Id">@user.UserName</option>

            }
        </select>

    </div>
  

    <button @onclick="Assign" class="btn btn-primary btn-block"> Assign </button>
</SAPAlertBox>

@if (selectedTodo == null)
{<div class="row">

        <div class="col-md-12">





            <div class="form-group">

                <button @onclick="() => Alert3.ShowAlert()" class="btn btn-primary">
                    Create
                </button>

            </div>
            <hr />

            <ul class="list-group mb-2">

                @foreach (var item in todoes.OrderByDescending(o => o.Created))
                {
                    <li @onclick="() => selectedTodo = item" class="list-group-item @ActiveClass(item)" style="cursor:pointer;margin:4px 0;border-left:40px solid @item.Color">
                        @item.Title
                        <label class="badge badge-light float-right">
                            @item.TodoItems.Count(c => c.Done) | @item.TodoItems.Count
                        </label>

                    </li>
                }
            </ul>
        </div>
    </div>

}

else
{
    <div class="row">
        <div class="col-md-12">

            <button @onclick="() => selectedTodo = null" class="btn btn-outline-warning">
                Back
            </button>
            <button @onclick="() => Alert2.ShowAlert()" class="btn btn-default text-muted float-right">
                Assign to others
            </button>
            <button @onclick="DeleteTask" class="btn btn-default text-danger float-right">
                Delete
            </button>
        </div>

    </div>
    <hr />
    <div class="row">

        <div class="col-md-12">



            <h4>
                <input @bind="selectedTodo.Title" @onfocusout="() => SaveTodoList()" class="form-control" />
            </h4>

            <ul class="list-group mb-2">
                @foreach (var todo in selectedTodo.TodoItems)
                {
                    <li class="list-group-item">
                        <button @onclick="() => ShowDetail(todo)" class="btn btn-default float-right">
                            <i class="oi oi-ellipses"></i>

                        </button>

                        <div class="form-group" style="display:flex;">
                            <div>
                                <input type="checkbox" style="margin:auto 5px;" value="@todo.Done" checked="@todo.Done" @onchange="(e) => CheckBoxChange(e,todo)" />

                            </div>
                            @if (todo.Focoused)
                            {
                                <input value="@todo.Title" @onfocusout="() => todo.Focoused = false" class="form-control" @onchange="(e) => InputChange(e,todo)" />

                            }
                            else
                            {

                                var txtDecoration = todo.Done ? "#2fc5a3" : "black";

                                <div style="color:@txtDecoration" @onclick="() => todo.Focoused = true">@todo.Title</div>
                                <i @onclick="() => todo.Focoused = true" style="margin: auto 5px" class="oi oi-pencil"></i>


                            }

                        </div>

                    </li>
                }
                <li class="list-group-item">
                    <button @onclick="AddTodo" class="btn btn-default">
                        Add Item ...

                    </button>
                </li>

            </ul>


        </div>
    </div>
}

@code {
    public SAPToastArea ToastArea;

    public SAPAlertBox Alert1;
    public SAPAlertBox Alert2;
    public SAPAlertBox Alert3;
    public string AssignUserId { get; set; }
    public string ErrorText { get; set; }
    string userId = "";
    List<TodoList> todoes = new List<TodoList>();
    List<ApplicationUser> otherUsers = new List<ApplicationUser>();

    private TodoList todoList = new TodoList() { };
    private TodoItem todoItem = new TodoItem();
    private TodoList selectedTodo;

    void DeleteTask()
    {
        TodoService.DeleteTask(selectedTodo);
        todoes.Remove(selectedTodo);
        selectedTodo = null;
        StateHasChanged();
        ToastArea.CreateToast
( new SAPToast {
    AlertType = SAPAlertType.Info,
    Title = "Todo Deleted",
    AutoCloseDelay = TimeSpan.FromSeconds(3),
    ShowProgressbar= true
});
    }
    void UpdateSubTask(TodoItem item)
    {

        Alert1.HideAlert();
        item.LastModified = DateTime.Now;
        SaveTodoList();
        ToastArea.CreateToast
( new SAPToast {
    AlertType = SAPAlertType.Success,
    Title = "Todo Updated",
    AutoCloseDelay = TimeSpan.FromSeconds(3),
    ShowProgressbar= true
});

    }
    void DeleteSubTask(TodoItem item)
    {
        selectedTodo.TodoItems.Remove(item);
        SaveTodoList();
        Alert1.HideAlert();
        todoItem = new TodoItem();
        StateHasChanged();


        ToastArea.CreateToast
 ( new SAPToast {
     AlertType = SAPAlertType.Info,
     Title = "SubTodo Deleted",
     AutoCloseDelay = TimeSpan.FromSeconds(3),
     ShowProgressbar= true
 });
    }

    void InputChange(ChangeEventArgs e, TodoItem todoItem)

    {
        todoItem.Title = e.Value.ToString();
        todoItem.LastModified = DateTime.Now;
        StateHasChanged();
        TodoService.Update(selectedTodo);

    }

    void ShowDetail(TodoItem item)
    {
        todoItem = item;
        Alert1.ShowAlert();
    }

    void CheckBoxChange(ChangeEventArgs e, TodoItem todoItem)

    {

        todoItem.Done = Convert.ToBoolean(e.Value.ToString());
        todoItem.LastModified = DateTime.Now;
        if (todoItem.Done)
        {
            todoItem.DoneDate = DateTime.Now;

        }
        else
        {
            todoItem.DoneDate = null;

        }

        StateHasChanged();
        TodoService.Update(selectedTodo);

    }
    string ActiveClass(TodoList item)
    {
        return item == selectedTodo ? "active" : "";
    }

    async void SaveTodoList(bool? assign = false)
    {
        if (assign.HasValue && assign.Value)
        {
     foreach (var item in selectedTodo.TodoItems)
        {
            item.ApplicationUserId = selectedTodo.ApplicationUserId;
        }
        }
   
        await TodoService.Update(selectedTodo);

    }
    void Assign()
    {
        selectedTodo.ApplicationUserId = AssignUserId;
        selectedTodo.Assigned = true;
        SaveTodoList(true);
        todoes.Remove(selectedTodo);
        selectedTodo = null;
        StateHasChanged();
        Alert2.HideAlert();
        ToastArea.CreateToast
            ( new SAPToast {
                AlertType = SAPAlertType.Success,
                Title = "Todo assigned",
                AutoCloseDelay = TimeSpan.FromSeconds(3),
                ShowProgressbar= true
            });
    }
    void AddTodo()
    {
        selectedTodo.TodoItems.Add(new TodoItem {  ApplicationUserId = userId});
    }
    //void KeyUp(KeyboardEventArgs e)
    //{
    //    if (e.Key == "Enter")
    //    {
    //    TodoService.Update(selectedTodo);

    //    }
    //}
    async void CreateTodo()
    {
        if (string.IsNullOrEmpty(todoList.Title))
        {

            ErrorText = "name should not be empty.";
        }
        else
        {

            todoList.ApplicationUserId = userId;
            todoList.CreatedBy = userId;
            var result = await TodoService.CreateTodo(todoList);
            todoes.Add(result);
            todoList = new TodoList() { ApplicationUserId = userId };


            ErrorText = "";
            Alert3.HideAlert();
            StateHasChanged();

            ToastArea.CreateToast
     ( new SAPToast {
         AlertType = SAPAlertType.Success,
         Title = "Todo created",
         AutoCloseDelay = TimeSpan.FromSeconds(3),
         ShowProgressbar= true
     });
        }

    }

    protected override async Task OnInitializedAsync()
    {

        userId = httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        todoes = TodoService.GetAllTodoes(userId);
        otherUsers = await  UserService.GetOtherUsers(userId);
        AssignUserId = otherUsers.FirstOrDefault()?.Id;



    }




}
